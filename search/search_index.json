{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"automathon","text":"<p> A Python library for simulating and visualizing finite automata. </p> <p> </p> <p>Documentation: https://rohaquinlop.github.io/automathon/</p> <p>Source Code: https://github.com/rohaquinlop/automathon</p> <p>PyPI: https://pypi.org/project/automathon/</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.10</li> <li>You also need to install Graphviz on your computer (download page, installation procedure for Windows, archived versions).Make sure that the directory containing the dot executable is on your systems\u2019 path.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install automathon\n</code></pre>"},{"location":"#upgrade","title":"Upgrade","text":"<pre><code>pip install automathon --upgrade\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>Here is are some examples about what you can do with automathon, you can check the documentation about Deterministic Finite Automata and Non-Deterministic Finite Automata to know more about the functions and methods that are available.</p>"},{"location":"#dfa-deterministic-finite-automata","title":"DFA - Deterministic Finite Automata","text":"<p>This image was created using automathon.</p> <p>Let's create the previous automata using the library:</p> <pre><code>from automathon import DFA\nq = {'q0', 'q1', 'q2'}\nsigma = {'0', '1'}\ndelta = { 'q0' : {'0' : 'q0', '1' : 'q1'},\n          'q1' : {'0' : 'q2', '1' : 'q0'},\n          'q2' : {'0' : 'q1', '1' : 'q2'}\n        }\ninitial_state = 'q0'\nf = {'q0'}\n\nautomata = DFA(q, sigma, delta, initial_state, f)\n</code></pre>"},{"location":"#verify-if-the-automata-is-valid","title":"Verify if the automata is valid","text":"<pre><code>automata.is_valid()    # True\n</code></pre> <p>In this case, the automata is valid but if it wasn't, the library would raise an exception with the error message.</p>"},{"location":"#errors","title":"Errors","text":"<p>Errors that the library can raise are:</p> <ul> <li>SigmaError:</li> <li>The automata contain an initial state, or a final state that's not defined in Q.</li> <li> <p>The automata contain a delta transition that's not defined in Q nor Sigma.</p> </li> <li> <p>InputError:</p> </li> <li>The automata is trying to consume a letter that's not defined in sigma.</li> </ul>"},{"location":"#verify-if-the-automata-accept-a-given-string","title":"Verify if the automata accept a given string","text":"<pre><code>automata.accept(\"001001\")  # True\nautomata.accept(\"00100\")   # False\n</code></pre>"},{"location":"#get-the-automatas-complement","title":"Get the automata's complement","text":"<pre><code>not_automata = automata.complement()\nnot_automata.accept(\"00100\")    #True\n</code></pre> <p>Note that this function returns a new automata, it doesn't modify the original one.</p>"},{"location":"#visualize-the-automata","title":"Visualize the automata","text":"<p>For both, DFA and NFA, the view method enables to visualize the automaton, receives as parameter a String as the file name for the png and svg files.</p> <p>More information about the graphviz attributes here.</p> <p> <pre><code># Default styling\nautomata.view(\"DFA Visualization\")\n\n# If you want to add custom styling, you can use the following\n\nautomata.view(\n    file_name=\"DFA Custom Styling\",\n    node_attr={'fontsize': '20'},\n    edge_attr={'fontsize': '20pt'}\n)\n</code></pre></p> <p>If you want to explore more about the functions and methods of the DFA class, you can check the DFA documentation. And if you want to know more about the NFA class, you can check the NFA documentation.</p>"},{"location":"#nfa-non-deterministic-finite-automata","title":"NFA - Non-Deterministic Finite Automata","text":"<p>Image taken from: r9paul.org</p>"},{"location":"#representing-the-previous-automata","title":"Representing the previous automata","text":"<pre><code>from automathon import NFA\n\n## Epsilon Transition is denoted by '' -&gt; Empty string\nq = {'q1', 'q2', 'q3', 'q4'}\nsigma = {'0', '1'}\ndelta = {\n    'q1' : {\n            '0' : {'q1'},\n            '1' : {'q1', 'q2'}\n            },\n    'q2' : {\n            '0' : {'q3'},\n            '' : {'q3'}\n            },\n    'q3' : {\n            '1' : {'q4'},\n            },\n    'q4' : {\n            '0' : {'q4'},\n            '1' : {'q4'},\n            },\n}\ninitial_state = 'q1'\nf = {'q4'}\n\nautomata = NFA(q, sigma, delta, initial_state, f)\n</code></pre>"},{"location":"#verify-if-the-automata-is-valid_1","title":"Verify if the automata is valid","text":"<pre><code>automata.is_valid()  # True\n</code></pre>"},{"location":"#verify-if-the-automata-accept-a-string","title":"Verify if the automata accept a string","text":"<pre><code>automata.accept(\"0000011\")   #True\nautomata.accept(\"000001\")    #False\n</code></pre>"},{"location":"#get-the-automatas-complement_1","title":"Get the automata's complement","text":"<pre><code>not_automata = automata.complement()\nnot_automata.accept(\"000001\")    #True\n</code></pre>"},{"location":"#visualize-the-automata_1","title":"Visualize the automata","text":"<p> <pre><code># Default styling\nautomata.view(\"NFA Visualization\")\n\n# You can decide between png and svg file formats\n# If you want to add custom styling, you can use the following\n\nautomata.view(\n    file_name=\"NFA Custom Styling\",\n    file_format=\"png\" or \"svg\",\n    node_attr={'fontsize': '20'},\n    edge_attr={'fontsize': '20pt'}\n)\n</code></pre></p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"dfa/","title":"Deterministic Finite Automata - DFA","text":"<p><code>DFA</code> is the class used in automathon to represent a Deterministic Finite Automata.</p>"},{"location":"dfa/#attributes","title":"Attributes","text":"<p>Here are the attributes of the <code>DFA</code> class:</p> <ul> <li><code>q</code> (<code>Set[str]</code>): Set of strings where each string is a state of the automata.</li> <li><code>sigma</code> (<code>Set[str]</code>): Set of strings where each string is a symbol of the     alphabet, the length of each string must be 1. The empty string is not     allowed in the <code>DFA</code> implementation if you need to use them then checkout     Non-Deterministic Finite Automata.</li> <li><code>delta</code> (<code>Dict[str, Dict[str, str]]</code>): Dictionary that represents the transition     function of the automata. The key of the dictionary is a state of the     automata and the value is another dictionary that represents the transition     function of the automata. The key of the inner dictionary is a symbol of the     alphabet and the value is the state that the automata will go if it consumes     the symbol.<ul> <li>Example: <pre><code>delta = {\n    'q0' : {'0' : 'q0', '1' : 'q1'},\n    'q1' : {'0' : 'q2', '1' : 'q0'},\n    'q2' : {'0' : 'q1', '1' : 'q2'},\n}\n</code></pre></li> </ul> </li> <li><code>initial_state</code> (<code>str</code>): String that represents the initial state of the automata. initial_state must be in q.</li> <li><code>f</code> (<code>Set[str]</code>): Set of strings where each string is a final state of the automata. f must be a subset of q.</li> </ul>"},{"location":"dfa/#example","title":"Example","text":"<p>Here is an example of how to create a <code>DFA</code>:</p> <pre><code>from automathon import DFA\n\nq = {'q0', 'q1', 'q2'}\nsigma = {'0', '1'}\ndelta = {\n    'q0' : {'0' : 'q0', '1' : 'q1'},\n    'q1' : {'0' : 'q2', '1' : 'q0'},\n    'q2' : {'0' : 'q1', '1' : 'q2'},\n}\ninitial_state = 'q0'\nf = {'q0'}\n\nautomata = DFA(q, sigma, delta, initial_state, f)\n</code></pre>"},{"location":"dfa/#functions-and-methods","title":"Functions and Methods","text":"<p>The <code>DFA</code> class has multiple functions and methods that you can use to interact with the automata. Here are the methods:</p>"},{"location":"dfa/#is_valid","title":"is_valid","text":"<p>This function checks if the automata is valid. The automata is valid if the initial state and the final states are in q, if the transitions are in q and sigma. If the automata is not valid, the function will raise an exception with the error message.</p> <p>Example:</p> <pre><code>automata.is_valid()    # True\n</code></pre>"},{"location":"dfa/#accept","title":"accept","text":"<p>This function receives a string and returns <code>True</code> if the automata accepts the string, otherwise it returns <code>False</code>.</p> <p>Example:</p> <pre><code>automata.accept(\"001001\")  # True\nautomata.accept(\"00100\")   # False\n</code></pre>"},{"location":"dfa/#view","title":"view","text":"<p>This method receives a string as the file name for the png and svg files. It enables to visualize the automaton. You can also add custom styling to the automata.</p> <p>Example:</p> <pre><code>automata.view(\"DFA Visualization\")\n\n# Add custom styling or change the file format\n\nautomata.view(file_name=\"DFA Custom Styling\",\n              file_format=\"png\" or \"svg\",\n              node_attr={'fontsize': '20'},\n              edge_attr={'fontsize': '20pt'})\n</code></pre>"},{"location":"dfa/#get_nfa","title":"get_nfa","text":"<p>This function returns a new NFA that represents the same language as the original DFA.</p> <p>Example:</p> <pre><code>automata_nfa = automata.get_nfa()\nautomata_nfa.accept(\"001001\")  # True\n</code></pre>"},{"location":"dfa/#complement","title":"complement","text":"<p>This function returns the complement of the automata. The complement of the automata is another automata that accepts the strings that the original automata doesn't accept and vice versa. This function returns a new automata, it doesn't modify the original one.</p> <p>Example:</p> <pre><code>not_automata = automata.complement()\nnot_automata.accept(\"00100\")    # True\nnot_automata.accept(\"001001\")   # False\n</code></pre>"},{"location":"dfa/#union","title":"union","text":"<p>This function receives another automata and returns a new automata that represents the union of the languages of the original automata and the automata received as a parameter.</p> <p>Example:</p> <pre><code>dfa = DFA(\n    q={\"A\", \"B\"},\n    sigma={\"0\", \"1\"},\n    delta={\"A\": {\"0\": \"A\", \"1\": \"B\"}, \"B\": {\"0\": \"B\", \"1\": \"A\"}},\n    initial_state=\"A\",\n    f={\"B\"},\n)\n\ndfa_1 = DFA(\n    q={\"R\", \"S\", \"T\", \"U\"},\n    sigma={\"0\", \"1\"},\n    delta={\n        \"R\": {\"0\": \"S\", \"1\": \"R\"},\n        \"S\": {\"0\": \"T\", \"1\": \"R\"},\n        \"T\": {\"0\": \"U\", \"1\": \"R\"},\n        \"U\": {\"0\": \"U\", \"1\": \"U\"},\n    },\n    initial_state=\"R\",\n    f={\"U\"},\n)\n\nunion_result = dfa.union(dfa_1)\n\nunion_result.is_valid()             # True\nunion_result.accept(\"00010010\")     # True\nunion_result.accept(\"0011000\")      # True\n</code></pre>"},{"location":"dfa/#intersection","title":"intersection","text":"<p>This function receives another automata and returns a new automata that represents the intersection of the languages of the original automata and the automata received as a parameter.</p> <p>Example:</p> <pre><code>dfa = DFA(\n    q={\"A\", \"B\"},\n    sigma={\"0\", \"1\"},\n    delta={\"A\": {\"0\": \"A\", \"1\": \"B\"}, \"B\": {\"0\": \"B\", \"1\": \"A\"}},\n    initial_state=\"A\",\n    f={\"B\"},\n)\n\ndfa_1 = DFA(\n    q={\"R\", \"S\", \"T\", \"U\"},\n    sigma={\"0\", \"1\"},\n    delta={\n        \"R\": {\"0\": \"S\", \"1\": \"R\"},\n        \"S\": {\"0\": \"T\", \"1\": \"R\"},\n        \"T\": {\"0\": \"U\", \"1\": \"R\"},\n        \"U\": {\"0\": \"U\", \"1\": \"U\"},\n    },\n    initial_state=\"R\",\n    f={\"U\"},\n)\n\nintersection_result = dfa.intersection(dfa_1)\n\nintersection_result.is_valid()          # True\nintersection_result.accept(\"0001\")      # True\nintersection_result.accept(\"00010010\")  # False\n</code></pre>"},{"location":"dfa/#difference","title":"difference","text":"<p>This function receives another automata and returns a new automata that represents the difference of the languages of the original automata and the automata received as a parameter.</p> <p>Example:</p> <pre><code>dfa = DFA(\n    q={\"1\", \"2\"},\n    sigma={\"a\", \"b\"},\n    delta={\"1\": {\"a\": \"2\", \"b\": \"1\"}, \"2\": {\"a\": \"1\", \"b\": \"2\"}},\n    initial_state=\"1\",\n    f={\"1\"},\n)\n\ndfa_1 = DFA(\n    q={\"3\", \"4\"},\n    sigma={\"a\", \"b\"},\n    delta={\"3\": {\"a\": \"3\", \"b\": \"4\"}, \"4\": {\"a\": \"4\", \"b\": \"3\"}},\n    initial_state=\"3\",\n    f={\"3\"},\n)\n\ndifference_result = dfa.difference(dfa_1)\n\ndifference_result.is_valid()        # True\ndifference_result.accept(\"b\")       # True\ndifference_result.accept(\"aba\")     # True\ndifference_result.accept(\"aa\")      # True\n</code></pre>"},{"location":"dfa/#symmetric_difference","title":"symmetric_difference","text":"<p>This function receives another automata and returns a new automata that represents the symmetric difference of the languages of the original automata and the automata received as a parameter.</p> <p>Example:</p> <pre><code>dfa = DFA(\n    q={\"1\", \"2\"},\n    sigma={\"a\", \"b\"},\n    delta={\"1\": {\"a\": \"2\", \"b\": \"1\"}, \"2\": {\"a\": \"1\", \"b\": \"2\"}},\n    initial_state=\"1\",\n    f={\"1\"},\n)\n\ndfa_1 = DFA(\n    q={\"3\", \"4\"},\n    sigma={\"a\", \"b\"},\n    delta={\"3\": {\"a\": \"3\", \"b\": \"4\"}, \"4\": {\"a\": \"4\", \"b\": \"3\"}},\n    initial_state=\"3\",\n    f={\"3\"},\n)\n\nsymmetric_difference_result = dfa.symmetric_difference(dfa_1)\n\nsymmetric_difference_result.is_valid()      # True\ndifference_result.accept(\"b\")               # True\ndifference_result.accept(\"a\")               # True\ndifference_result.accept(\"abbabb\")          # False\n</code></pre>"},{"location":"dfa/#product","title":"product","text":"<p>This function receives another automata and returns a new automata that represents the product of the languages of the original automata and the automata received as a parameter.</p> <p>Example:</p> <pre><code>dfa = DFA(\n    q={\"A\", \"B\"},\n    sigma={\"a\", \"b\"},\n    delta={\"A\": {\"a\": \"B\", \"b\": \"A\"}, \"B\": {\"a\": \"A\", \"b\": \"B\"}},\n    initial_state=\"A\",\n    f={\"A\"},\n)\n\ndfa_1 = DFA(\n    q={\"C\", \"D\"},\n    sigma={\"a\", \"b\"},\n    delta={\"C\": {\"a\": \"C\", \"b\": \"D\"}, \"D\": {\"a\": \"D\", \"b\": \"C\"}},\n    initial_state=\"C\",\n    f={\"C\"},\n)\n\nproduct_result = dfa.product(dfa_1)\n\nproduct_result.is_valid()       # True\nproduct_result.accept(\"bb\")     # True\nproduct_result.accept(\"b\")      # False\n</code></pre>"},{"location":"nfa/","title":"Non-Deterministic Finite Automata - NFA","text":"<p><code>NFA</code> is the class used in automathon to represent a Non-Deterministic Finite Automata.</p>"},{"location":"nfa/#attributes","title":"Attributes","text":"<p>Here are the attributes of the <code>NFA</code> class:</p> <ul> <li><code>q</code> (<code>Set[str]</code>): Set of strings where each string is a state of the automata.</li> <li><code>sigma</code> (<code>Set[str]</code>): Set of strings where each string is a symbol of the     alphabet, the length of each string must be 1. The empty string is allowed in     the <code>NFA</code> implementation as the epsilon transition.</li> <li><code>delta</code> (<code>Dict[str, Dict[str, Set[str]]]</code>): Dictionary that represents the     transition function of the automata. The key of the dictionary is a state of     the automata and the value is another dictionary that represents the     transition function of the automata. The key of the inner dictionary is a     symbol of the alphabet and the value is a set of states that the automata     will go if it consumes the symbol.<ul> <li>Example: <pre><code>delta = {\n    'q0' : {\n            '0' : {'q0', 'q2'},\n            '1' : {'q1', 'q2', 'q3'}\n            },\n    'q1' : {\n            '0' : {'q2'},\n            '1' : {'q0', 'q1'}\n            },\n    'q2' : {\n            '0' : {'q1', 'q2'},\n            '' : {'q2'}\n            },\n}\n</code></pre></li> </ul> </li> <li><code>initial_state</code> (<code>str</code>): String that represents the initial state of the     automata. initial_state must be in q.</li> <li><code>f</code> (<code>Set[str]</code>): Set of strings where each string is a final state of the     automata. f must be a subset of q.</li> </ul>"},{"location":"nfa/#example","title":"Example","text":"<p>Here is an example of how to create a <code>NFA</code>:</p> <pre><code>from automathon import NFA\n\n## Epsilon Transition is denoted by '' -&gt; Empty string\nq = {'q1', 'q2', 'q3', 'q4'}\nsigma = {'0', '1'}\ndelta = {\n    'q1' : {\n            '0' : {'q1'},\n            '1' : {'q1', 'q2'}\n            },\n    'q2' : {\n            '0' : {'q3'},\n            '' : {'q3'}\n            },\n    'q3' : {\n            '1' : {'q4'},\n            },\n    'q4' : {\n            '0' : {'q4'},\n            '1' : {'q4'},\n            },\n}\ninitial_state = 'q1'\nf = {'q4'}\n\nautomata = NFA(q, sigma, delta, initial_state, f)\n</code></pre>"},{"location":"nfa/#functions-and-methods","title":"Functions and Methods","text":"<p>The <code>NFA</code> class has multiple functions and methods that you can use to interact with the automata. Here are the methods:</p>"},{"location":"nfa/#is_valid","title":"is_valid","text":"<p>This function checks if the automata is valid. The automata is valid if the initial state and the final states are in q, if the transitions are in q and sigma. If the automata is not valid, the function will raise an exception with the error message.</p> <p>Example:</p> <pre><code>automata.is_valid()    # True\n</code></pre>"},{"location":"nfa/#accept","title":"accept","text":"<p>This function receives a string and returns <code>True</code> if the automata accepts the string, otherwise it returns <code>False</code>.</p> <p>Example:</p> <pre><code>automata.accept(\"0000011\")   # True\nautomata.accept(\"000001\")    # False\n</code></pre>"},{"location":"nfa/#view","title":"view","text":"<p>This method receives a string as the file name for the png and svg files. It enables to visualize the automaton. You can also add custom styling to the automata.</p> <pre><code>automata.view(\"NFA Visualization\")\n\n# Add custom styling or change the file format\n\nautomata.view(\n    file_name=\"NFA Custom Styling\",\n    file_format=\"png\" or \"svg\",\n    node_attr={'fontsize': '20'},\n    edge_attr={'fontsize': '20pt'}\n)\n</code></pre> <p>Here is the result of the visualization:</p> <p></p>"},{"location":"nfa/#contains_epsilon_transitions","title":"contains_epsilon_transitions","text":"<p>This function returns <code>True</code> if the automata contains epsilon transitions, otherwise it returns <code>False</code>.</p> <p>Example:</p> <pre><code>automata.contains_epsilon_transitions()    # True\n</code></pre>"},{"location":"nfa/#remove_epsilon_transitions","title":"remove_epsilon_transitions","text":"<p>This function returns a new <code>NFA</code> that represents the same language as the original <code>NFA</code> but without epsilon transitions.</p> <p>Example:</p> <pre><code>automata_1 = automata.remove_epsilon_transitions()\n\nautomata_1.accept(\"0000011\")   # True\nautomata_1.accept(\"000001\")    # False\n</code></pre>"},{"location":"nfa/#minimize","title":"minimize","text":"<p>This function returns a new <code>NFA</code> that represents the same language as the original <code>NFA</code> but minimized.</p> <p>Example:</p> <pre><code>automata_2 = automata.minimize()\n\nautomata_2.accept(\"0000011\")   # True\nautomata_2.accept(\"000001\")    # False\n</code></pre>"},{"location":"nfa/#renumber","title":"renumber","text":"<p>This method modifies the automata by renumbering the states. The new states will be named as <code>q0</code>, <code>q1</code>, <code>q2</code>, and so on.</p> <p>Example:</p> <pre><code>automata.renumber()\n\nautomata.accept(\"0000011\")   # True\nautomata.accept(\"000001\")    # False\n</code></pre>"},{"location":"nfa/#get_dfa","title":"get_dfa","text":"<p>This function returns a new DFA that represents the same language as the original NFA.</p> <p>Example:</p> <pre><code>automata_3 = automata.get_dfa()\n\nautomata_3.accept(\"0000011\")   # True\nautomata_3.accept(\"000001\")    # False\n</code></pre>"},{"location":"nfa/#complement","title":"complement","text":"<p>This function returns the complement of the automata. The complement of the automata is another automata that accepts the strings that the original automata doesn't accept and vice versa. This function returns a new automata, it doesn't modify the original one.</p> <p>Example:</p> <pre><code>not_automata = automata.complement()\n\nnot_automata.accept(\"000001\")    # True\nnot_automata.accept(\"0000011\")   # False\n</code></pre>"},{"location":"nfa/#union","title":"union","text":"<p>This function receives another automata and returns a new automata that represents the union of the languages of the original automata and the automata received as a parameter.</p> <p>Example:</p> <pre><code>from automathon import NFA\n\nnfa = NFA(\n    q={\"A\"},\n    sigma={\"a\"},\n    delta={\"A\": {\"a\": {\"A\"}}},\n    initial_state=\"A\",\n    f={\"A\"}\n)\n\nnfa_1 = NFA(\n    q={\"C\", \"D\", \"E\"},\n    sigma={\"a\", \"b\"},\n    delta={\n        \"C\": {\n            \"b\": {\"D\"},\n        },\n        \"D\": {\"a\": {\"E\"}, \"b\": {\"D\"}},\n    },\n    initial_state=\"C\",\n    f={\"E\"},\n)\n\nunion_result = nfa.union(nfa_1)\n\nunion_result.is_valid()             # True\nunion_result.accept(\"aaaaaa\")       # True\nunion_result.accept(\"aaaabbbbaaa\")  # False\n</code></pre>"},{"location":"nfa/#intersection","title":"intersection","text":"<p>This function receives another automata and returns a new automata that represents the intersection of the languages of the original automata and the automata received as a parameter.</p> <p>Example:</p> <pre><code>nfa = NFA(\n    q={\"q1\", \"q2\", \"q3\", \"q4\", \"q5\"},\n    sigma={\"a\", \"b\"},\n    delta={\n        \"q1\": {\n            \"a\": {\"q2\", \"q1\"},\n            \"b\": {\"q1\"},\n        },\n        \"q2\": {\"a\": {\"q3\"}},\n        \"q3\": {\n            \"a\": {\"q3\", \"q4\"},\n            \"b\": {\"q3\"},\n        },\n        \"q4\": {\"a\": {\"q5\"}},\n        \"q5\": {\n            \"a\": {\"q5\"},\n            \"b\": {\"q5\"},\n        },\n    },\n    initial_state=\"q1\",\n    f={\"q5\"},\n)\n\nnfa_1 = NFA(\n    q={\"q1\", \"q2\", \"q3\"},\n    sigma={\"a\", \"b\"},\n    delta={\n        \"q1\": {\n            \"a\": {\"q2\", \"q1\"},\n            \"b\": {\"q1\"},\n        },\n        \"q2\": {\"a\": {\"q3\"}},\n        \"q3\": {\n            \"a\": {\"q3\"},\n            \"b\": {\"q3\"},\n        },\n    },\n    initial_state=\"q1\",\n    f={\"q3\"},\n)\n\nintersection_result = nfa.intersection(nfa_1)\n\nintersection_result.is_valid()                  # True\nintersection_result.accept(\"aaaaaaaa\")          # True\nintersection_result.accept(\"aaaaaaaabbbbb\")     # True\nintersection_result.accept(\"a\")                 # False\nintersection_result.accept(\"bbbbbbbb\")          # False\n</code></pre>"},{"location":"nfa/#product","title":"product","text":"<p>This function receives another automata and returns a new automata that represents the product of the languages of the original automata and the automata received as a parameter.</p> <p>Example:</p> <pre><code>from automathon import NFA\n\nnfa = NFA(\n    q={\"A\", \"B\"},\n    sigma={\"a\", \"b\"},\n    delta={\"A\": {\"a\": {\"B\"}, \"b\": {\"A\"}}, \"B\": {\"a\": {\"A\"}, \"b\": {\"B\"}}},\n    initial_state=\"A\",\n    f={\"A\"},\n)\n\nnfa_1 = NFA(\n    q={\"C\", \"D\"},\n    sigma={\"a\", \"b\"},\n    delta={\"C\": {\"a\": {\"C\"}, \"b\": {\"D\"}}, \"D\": {\"a\": {\"D\"}, \"b\": {\"C\"}}},\n    initial_state=\"C\",\n    f={\"C\"},\n)\n\nproduct_result = nfa.product(nfa_1)\n\nproduct_result.is_valid()           # True\nproduct_result.accept(\"\")           # True\nproduct_result.accept(\"bb\")         # True\nproduct_result.accept(\"bbaaa\")      # False\n</code></pre>"}]}